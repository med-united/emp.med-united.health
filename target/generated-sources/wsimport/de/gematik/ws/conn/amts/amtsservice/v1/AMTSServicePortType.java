
package de.gematik.ws.conn.amts.amtsservice.v1;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import de.gematik.ws.conn.connectorcommon.v5.Status;
import de.gematik.ws.conn.connectorcontext.v2.ContextType;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AMTSServicePortType", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0")
@XmlSeeAlso({
    de.gematik.ws.tel.error.v2.ObjectFactory.class,
    de.gematik.ws.conn.connectorcommon.v5.ObjectFactory.class,
    oasis.names.tc.dss._1_0.core.schema.ObjectFactory.class,
    de.gematik.ws.conn.amts.amtsservice.v1.ObjectFactory.class,
    de.gematik.ws.conn.cardservicecommon.v2.ObjectFactory.class,
    de.gematik.ws.conn.connectorcontext.v2.ObjectFactory.class,
    oasis.names.tc.saml._1_0.assertion.ObjectFactory.class,
    org.w3._2000._09.xmldsig_.ObjectFactory.class
})
public interface AMTSServicePortType {


    /**
     * 
     * @param usingPIN
     * @param ehcHandle
     * @param hpcHandle
     * @param mpData
     * @param context
     * @param egkUsage
     * @param egkValid
     * @param status
     * @throws FaultMessage
     */
    @WebMethod(operationName = "ReadMP", action = "http://ws.gematik.de/conn/amtss/AMTSService/WSDL/v1.0#ReadMP")
    @RequestWrapper(localName = "ReadMP", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.ReadMP")
    @ResponseWrapper(localName = "ReadMPResponse", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.ReadMPResponse")
    public void readMP(
        @WebParam(name = "EhcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String ehcHandle,
        @WebParam(name = "HpcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String hpcHandle,
        @WebParam(name = "Context", targetNamespace = "http://ws.gematik.de/conn/ConnectorContext/v2.0")
        ContextType context,
        @WebParam(name = "UsingPIN", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0")
        String usingPIN,
        @WebParam(name = "Status", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0", mode = WebParam.Mode.OUT)
        Holder<Status> status,
        @WebParam(name = "MPData", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<byte[]> mpData,
        @WebParam(name = "EGKValid", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<Boolean> egkValid,
        @WebParam(name = "EGKUsage", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<Integer> egkUsage)
        throws FaultMessage
    ;

    /**
     * 
     * @param usingPIN
     * @param ehcHandle
     * @param hpcHandle
     * @param mpData
     * @param context
     * @param egkValid
     * @param status
     * @throws FaultMessage
     */
    @WebMethod(operationName = "WriteMP", action = "http://ws.gematik.de/conn/amtss/AMTSService/WSDL/v1.0#WriteMP")
    @RequestWrapper(localName = "WriteMP", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.WriteMP")
    @ResponseWrapper(localName = "WriteMPResponse", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.WriteMPResponse")
    public void writeMP(
        @WebParam(name = "EhcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String ehcHandle,
        @WebParam(name = "HpcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String hpcHandle,
        @WebParam(name = "Context", targetNamespace = "http://ws.gematik.de/conn/ConnectorContext/v2.0")
        ContextType context,
        @WebParam(name = "MPData", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0")
        byte[] mpData,
        @WebParam(name = "UsingPIN", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0")
        String usingPIN,
        @WebParam(name = "Status", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0", mode = WebParam.Mode.OUT)
        Holder<Status> status,
        @WebParam(name = "EGKValid", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<Boolean> egkValid)
        throws FaultMessage
    ;

    /**
     * 
     * @param consentData
     * @param ehcHandle
     * @param hpcHandle
     * @param context
     * @param egkValid
     * @param status
     * @throws FaultMessage
     */
    @WebMethod(operationName = "ReadConsent", action = "http://ws.gematik.de/conn/amtss/AMTSService/WSDL/v1.0#ReadConsent")
    @RequestWrapper(localName = "ReadConsent", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.ReadConsent")
    @ResponseWrapper(localName = "ReadConsentResponse", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.ReadConsentResponse")
    public void readConsent(
        @WebParam(name = "EhcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String ehcHandle,
        @WebParam(name = "HpcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String hpcHandle,
        @WebParam(name = "Context", targetNamespace = "http://ws.gematik.de/conn/ConnectorContext/v2.0")
        ContextType context,
        @WebParam(name = "Status", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0", mode = WebParam.Mode.OUT)
        Holder<Status> status,
        @WebParam(name = "ConsentData", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<byte[]> consentData,
        @WebParam(name = "EGKValid", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<Boolean> egkValid)
        throws FaultMessage
    ;

    /**
     * 
     * @param consentData
     * @param ehcHandle
     * @param hpcHandle
     * @param context
     * @param egkValid
     * @param status
     * @throws FaultMessage
     */
    @WebMethod(operationName = "WriteConsent", action = "http://ws.gematik.de/conn/amtss/AMTSService/WSDL/v1.0#WriteConsent")
    @RequestWrapper(localName = "WriteConsent", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.WriteConsent")
    @ResponseWrapper(localName = "WriteConsentResponse", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.WriteConsentResponse")
    public void writeConsent(
        @WebParam(name = "EhcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String ehcHandle,
        @WebParam(name = "HpcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String hpcHandle,
        @WebParam(name = "Context", targetNamespace = "http://ws.gematik.de/conn/ConnectorContext/v2.0")
        ContextType context,
        @WebParam(name = "ConsentData", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0")
        byte[] consentData,
        @WebParam(name = "Status", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0", mode = WebParam.Mode.OUT)
        Holder<Status> status,
        @WebParam(name = "EGKValid", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<Boolean> egkValid)
        throws FaultMessage
    ;

    /**
     * 
     * @param ehcHandle
     * @param hpcHandle
     * @param context
     * @param egkValid
     * @param status
     * @throws FaultMessage
     */
    @WebMethod(operationName = "DeleteConsent", action = "http://ws.gematik.de/conn/amtss/AMTSService/WSDL/v1.0#DeleteConsent")
    @RequestWrapper(localName = "DeleteConsent", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.DeleteConsent")
    @ResponseWrapper(localName = "DeleteConsentResponse", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", className = "de.gematik.ws.conn.amts.amtsservice.v1.DeleteConsentResponse")
    public void deleteConsent(
        @WebParam(name = "EhcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String ehcHandle,
        @WebParam(name = "HpcHandle", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0")
        String hpcHandle,
        @WebParam(name = "Context", targetNamespace = "http://ws.gematik.de/conn/ConnectorContext/v2.0")
        ContextType context,
        @WebParam(name = "Status", targetNamespace = "http://ws.gematik.de/conn/ConnectorCommon/v5.0", mode = WebParam.Mode.OUT)
        Holder<Status> status,
        @WebParam(name = "EGKValid", targetNamespace = "http://ws.gematik.de/conn/amts/AMTSService/v1.0", mode = WebParam.Mode.OUT)
        Holder<Boolean> egkValid)
        throws FaultMessage
    ;

}
